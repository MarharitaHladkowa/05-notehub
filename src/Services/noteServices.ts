import axios from "axios";
import type { Note } from "../types/note";

// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VITE_NOTEHUB_API_KEY –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const VITE_NOTEHUB_API_KEY = import.meta.env.VITE_NOTEHUB_API_KEY;

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ URL –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å VITE_API_BASE_URL
const BASE_URL = "https://notehub-public.goit.study/api";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ BASE_URL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –∫–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
// –¢–µ–ø–µ—Ä—å —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
if (!BASE_URL) {
  console.error("BASE_URL is missing! Check VITE_API_BASE_URL in .env file.");
  // –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è, –º—ã –Ω–µ –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å.
  // –û—Å—Ç–∞–≤–∏–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.
}

export const deleteNote = async (noteId: string): Promise<void> => {
  // *–û–ë–†–ê–¢–ò–¢–ï –í–ù–ò–ú–ê–ù–ò–ï: –ó–î–ï–°–¨ –¢–û–ñ–ï –ù–£–ñ–ù–ê –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ê*
  if (!VITE_NOTEHUB_API_KEY || !BASE_URL) {
    console.error("API Key or Base URL is missing for deletion.");
    throw new Error("API Key and Base URL are required for this operation.");
  }
  await axios.delete(`${BASE_URL}/notes/${noteId}`, {
    headers: {
      Authorization: `Bearer ${VITE_NOTEHUB_API_KEY}`,
    },
  });
};

export interface NoteDetails extends Note {
  createdAt: string;
  updatedAt: string;
}

export interface NoteResponse {
  page: number;
  results: Note[];
  total_pages: number;
  total_results: number;
  createdAt?: string;
  updatedAt?: string;
}

export async function fetchNotes(
  searchQuery: string,
  page: number = 1
): Promise<NoteResponse> {
  // –î–û–ë–ê–í–õ–ï–ù–´ –õ–û–ì–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
  console.log("Debug check: BASE_URL is:", !!BASE_URL); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å true
  console.log("Debug check: API_KEY is:", !!VITE_NOTEHUB_API_KEY);

  // üõë –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –∫–ª—é—á –∏–ª–∏ URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å.
  if (!VITE_NOTEHUB_API_KEY || !BASE_URL) {
    console.error(
      "--- fetchNotes ERROR: VITE_NOTEHUB_API_KEY is missing! (Base URL is hardcoded) ---"
    );
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ useQuery
    return { results: [], page: 1, total_pages: 1, total_results: 0 };
  }

  // 1. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  let url;
  const params: Record<string, string | number> = {
    page: page,
    language: "en-US",
  };

  if (searchQuery.trim() === "") {
    // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç (–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
    url = `${BASE_URL}/notes`;
    console.log("--- fetchNotes: Using /notes for all data. ---");
  } else {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–∏—Å–∫–∞
    url = `${BASE_URL}/search/notes`;
    params.query = searchQuery;
    console.log(
      `--- fetchNotes: Using /search/notes for query: ${searchQuery}. ---`
    );
  }

  try {
    const response = await axios.get<NoteResponse>(url, {
      params: params, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      headers: {
        Authorization: `Bearer ${VITE_NOTEHUB_API_KEY}`,
      },
    });

    // *–í–∞–∂–Ω–æ:* –≠–Ω–¥–ø–æ–∏–Ω—Ç /notes –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç —Å results.
    // –ï—Å–ª–∏ url - /notes, –º—ã –¥–æ–ª–∂–Ω—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É NoteResponse.

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ /notes –∏ –æ—Ç–≤–µ—Ç - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤ (–Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
    if (url.endsWith("/notes") && Array.isArray(response.data)) {
      // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤, –º—ã –µ–≥–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
      return {
        page: page,
        results: response.data as Note[],
        total_pages: 1, // –ò–ª–∏ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ API –Ω–µ –¥–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è /notes
        total_results: (response.data as Note[]).length,
      };
    }

    // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å (–¥–ª—è /search/notes)
    return response.data;
  } catch (error) {
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–∞ —Å–µ—Ç–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ (401, 500 –∏ —Ç.–¥.)
    console.error("--- fetchNotes ERROR ---", error);
    throw error;
  }
}
